!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}y(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&y(e,"error",t,n)}(e,o,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var c=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function p(e,t,n,r){var o,i,s,a;if(u(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=l(e))>0&&s.length>o&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function m(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=m.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):g(o,o.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function g(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function y(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){r.once&&e.removeEventListener(t,o),n(i)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var u=c.length,l=g(c,u);for(n=0;n<u;++n)i(l[n],this,t)}return!0},a.prototype.addListener=function(e,t){return p(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return p(this,e,t,!0)},a.prototype.once=function(e,t){return u(t),this.on(e,f(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,f(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,o,i,s;if(u(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},a.prototype.listenerCount=h,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t){e.exports=function(e){switch((e.match(/\.(\w+)$/)||[])[1]){case"png":return function(e,t,n){var r=new Promise((function(r,o){t.onerror=function(t){o(new Error("fetching "+e+" failed"))},t.addEventListener(n,(function(){r(t)}))}));return t.src=e,r}(e,new Image,"load");case"mp3":return function(e){console.log("trying to preload :"+e);var t=new Audio;return done=new Promise((e,n)=>{t.addEventListener("canplaythrough",(function(){e(t)})),t.addEventListener("error",e=>{console.log("COULD NOT LOAD AUDIO"),n("COULD NOT LOAD AUDIO")})}),t.src=e,t.load(),done}(e);case"js":return config.loadJSON(e);default:return function(e,t){return new Promise((function(n,r){var o=new XMLHttpRequest;o.open("GET",e,!0),o.responseType=t,o.addEventListener("load",(function(t){if(200!=o.status)return r(new Error("fetching "+e+" failed"));n(o.response)})),o.send()}))}(e,"arraybuffer")}}},function(e,t,n){let r,o,i,s,a,c,u,l=n(1),p=n(6),m=e.exports={};m.load=()=>{let e=window.location.search.substr(1);e=p.parse(e);let t=e.beatmap;if(a=parseInt(e.bpm),c=e.writer,u=e.name,!t)return location.href="./chose.html";let n="./beatmaps/"+t;return console.log(n),Promise.all([l(n+".mp3"),l(n+".js")]).then(e=>{r=e[0],console.log(r.duration),console.log(e[1].length),o=e[1],i=[],s=0})},m.result=e=>{if(null==e&&null==e&&(e=s),r.paused||o.length<=e)return"before";let t=1e3*r.currentTime-o[e][0],n=Math.abs(t);return n<150?"good":n<300?"pass":t<-300?"before":t>300?"after":"miss"},m.hit=e=>{let t;switch(e){case"up":t=1;break;case"down":t=2;break;case"left":t=3;break;case"right":t=4}let n=m.result(s);return i[s]="good"==n||"pass"==n|"miss"==n,i[s]?o[s++][1]==t?n:"miss":n},m.search=()=>{let e=s;for(;"after"==m.result(s);)s++;return e!=s},m.play=()=>{r.paused?r.play():r.pause()},m.pause=()=>{r.pause()},m.state=()=>({total:1e3*r.duration,beatmap:o,index:s,record:i,time:1e3*r.currentTime,bpm:a,name:u,writer:c})},function(e,t,n){const r=n(4);let o=n(5),i=n(2);const s=new(n(0));let a,c={score:0,combo:0,auto:!1,lastCombo:0},u=[];window.addEventListener("load",e=>{let t=[o.load(),i.load()];Promise.all(t).then(()=>{r.on("hit",(e,t)=>{o.tray(t),s.emit("hit",e)}),r.on("hitUp",(e,t)=>{o.tray(t)});let e=!1;r.on("play",(function(){e||(config.gameBehest(m.e,i.state().bpm),e=!0),i.play()})),r.on("pause",(function(){i.pause()})),r.on("auto",()=>c.auto=!c.auto),s.on("hit",e=>{let t=i.hit(e);"good"!=t&&"pass"!=t||s.emit("ok",t),s.emit(t)}),s.on("miss",(function(){u.push(c.combo),c.combo=0,o.combo(c.combo)})),s.on("ok",e=>{o.fire(e),o.combo(++c.combo)}),s.on("good",()=>{c.score+=3}),s.on("pass",()=>{c.score+=1}),r.load(),a=setInterval(h,16)})});let l,p={state:0,time:16,count:5};let m={e:1,l:2,d:3,y:4,m:5,a:6,ss:4e3,s:6e3,ct:0,c:1,state:1};function f(){let e=i.state().time;1==m.state&&e>=m.ss&&(config.gameBehest(m.l,i.state().bpm),m.c=m.l,m.state=2),2==m.state&&e>=m.ct+m.s&&(!function(e){0==c.combo?(config.gameBehest(m.m,i.state().bpm),m.c=m.m,m.ct=e):c.combo>=10&&m.d!=m.c?(config.gameBehest(m.d,i.state().bpm),m.c=m.d,m.ct=e):c.combo<10&&c.combo>0&&m.l!=m.c&&(config.gameBehest(m.l,i.state().bpm),m.c=m.l,m.ct=e)}(e),console.log("act.state",m.state))}let d=!0;function h(){if(i.state().total-4e3<=i.state().time&&d&&(d=!1,config.gameBehest(m.y,i.state().bpm)),i.state().total==i.state().time){u.push(c.lastCombo);let e=Math.max.apply(null,u),t=c.score;clearInterval(a),i.state().beatmap.length==e&&config.gameBehest(m.a,120);let n=3*i.state().beatmap.length,r=i.state().name,o=i.state().writer;return void(location.href=`./end.html?score=${t}&combo=${e}&total=${n}&name=${r}&writer=${o}`)}if(i.search()&&s.emit("miss"),o.clear(),o.dish(),o.progressBg(),o.loop(),o.track(i.state()),o.progress(c.score),function(){let e=c.score;l=3*i.state().beatmap.length*3.5/10,e>l&&0==p.state?(p.state=1,p.currTime=i.state().time,r.emit("touchOnOff"),c.auto=!0,o.graphEvent.emit("showTime"),m.c!=m.d&&(config.gameBehest(m.d,i.state().bpm),m.c=m.d)):(1==p.state&&5==p.count&&p.currTime+1e3*p.time-i.state().time<=5e3&&(o.graphEvent.emit("countdown",p.count),p.count=4),1==p.state&&4==p.count&&p.currTime+1e3*p.time-i.state().time<=4e3&&(o.graphEvent.emit("countdown",p.count),p.count=3),1==p.state&&3==p.count&&p.currTime+1e3*p.time-i.state().time<=3e3&&(o.graphEvent.emit("countdown",p.count),p.count=2),1==p.state&&2==p.count&&p.currTime+1e3*p.time-i.state().time<=2e3&&(o.graphEvent.emit("countdown",p.count),p.count=1),1==p.state&&1==p.count&&p.currTime+1e3*p.time-i.state().time<=1e3&&(o.graphEvent.emit("countdown",p.count),p.count=0),1==p.state&&0==p.count&&p.currTime+1e3*p.time-i.state().time<=200&&(o.graphEvent.emit("countdown",p.count),p.count=-1),1==p.state&&i.state().time>p.currTime+1e3*p.time&&(p.state=2,r.emit("touchOnOff"),c.auto=!1))}(),o.score(c.score),f(),c.combo>c.lastCombo&&(c.lastCombo=c.combo),c.auto&&"good"==i.result()){var e,t=i.state();switch(t.beatmap[t.index][1]){case 1:e="up";break;case 2:e="down";break;case 3:e="left";break;case 4:e="right"}s.emit("hit",e)}}},function(e,t,n){const r=n(0);n(1);let o=window.key=e.exports=new r,i={up:!1,down:!1,left:!1,right:!1},s={up:"up",down:"down",left:"left",right:"right"},a={p:"play",a:"auto",ArrowUp:"up",ArrowRight:"right",ArrowLeft:"left",ArrowDown:"down"};o.load=()=>{window.addEventListener("touchstart",o.events,!0),window.addEventListener("touchend",o.events,!0),window.addEventListener("click",e=>{let t=e.target,n=t.getAttribute("data-attr");"play"==n&&(o.emit(n),t.parentNode.parentNode.parentNode.style.display="none")})};let c=!0;o.on("touchOnOff",()=>{c=!c}),window.addEventListener("keydown",e=>{if("play"==a[e.key])return o.emit(a[e.key]);if("auto"==a[e.key])return o.emit(a[e.key]);let t=a[e.key];t&&!i[t]&&(i[t]=!0,o.emit("hit",t,i))}),window.addEventListener("keyup",e=>{let t=a[e.key];t&&i[t]&&(i[t]=!1,o.emit("hitUp",t,i))}),o.events=e=>{let t=e.target,n=s[t.getAttribute("data-attr")];console.log("this is touch :"+n),c?n&&!i[n]?(i[n]=!0,o.emit("hit",n,i)):(i[n]=!1,o.emit("hitUp",n,i)):i[n]&&(i[n]=!1,o.emit("hitUp",n,i))}},function(e,t,n){let r,o,i,s,a=n(1),c=n(2);o=window.innerWidth,i=.45*window.innerHeight;let u=n(0),l=t.graphEvent=new u,p={duration:2600,fromX:0,toX:o,y:.68*i,dest:87,radius:25};const m={down:"down",left:"left",right:"right",up:"up"};let f={dest:87,radius:33,y:.68*i,fromX:0},d={arr:[],centerX:87,centerY:.68*i,radius:55,from:7,to:14},h={count:0,state:7,from:7,to:10,centerX:.11*o,bottomY:.28*i,width:.136*o,height:.136*i};function g(e){return Array.apply(null,{length:21}).map((function(t,n){return e*Math.sin(Math.PI*n/20)}))}function y(e){v.innerHTML=" ",e.classList.add("showTime-img"),e.classList.add("active"),v.appendChild(e)}let v=document.querySelector(".showTime");l.on("showTime",()=>{y(s[33])}),l.on("countdown3",()=>{let e=s[34];e.style.width="82px",e.style.height="90px",y(e)}),l.on("countdown2",()=>{let e=s[35];e.style.width="82px",e.style.height="90px",y(e)}),l.on("countdown1",()=>{let e=s[36];e.style.width="50px",e.style.height="88px",y(e)}),l.on("countdown",e=>{let t;switch(e){case 5:t=s[33],v.innerHTML=" ",t.classList.add("showTime-img"),t.classList.add("active1"),v.appendChild(t);break;case 4:t=s[37],t.style.width="400px",t.style.height="72px",y(t);break;case 3:t=s[34],t.style.width="82px",t.style.height="90px",y(t);break;case 2:t=s[35],t.style.width="82px",t.style.height="90px",y(t);break;case 1:t=s[36],t.style.width="50px",t.style.height="88px",y(t);break;case 0:v.innerHTML=" "}}),t.load=()=>{!function(){let e=document.getElementById("canvas");r=e.getContext("2d"),e.width=o,e.height=i}(),d.anmap=g(d.radius),h.anmap=g(h.height),h.numAnmap=g(h.height+h.from),document.querySelector(".showTime-container").style.top=77*i/100*347/1e3+"px",p.fx=p.fromX-p.radius,p.tx=p.toX+p.radius,p.dy=p.y-p.radius,p.diameter=2*p.radius,p.v=(p.tx-p.fx)/p.duration,p.timeFrom=(p.fx-p.dest)/p.v,p.timeTo=p.timeFrom+p.duration,f.fx=f.dest-f.radius,f.dy=f.y-f.radius,f.diameter=2*f.radius;let e=[];for(let t=1;t<=2;t++)for(let n=0;n<10;n++)e.push("./image/num_"+t+"_"+n+".png");return e=e.concat(["./image/pic_reaction_g.png","./image/good.png","./image/great.png","./image/prefert.png","./image/Combo.png","./image/up.png","./image/down.png","./image/left.png","./image/right.png","./image/pic_reaction_g1.png","./image/sliding_1.png","./image/sliding_2.png","./image/bg_num_s.png","./image/showtime.png","./image/pic_3.png","./image/pic_2.png","./image/pic_1.png","./image/pic_go.png","./image/pic_reaction_pass.png"]).map(a),Promise.all(e).then(e=>s=e)},t.track=e=>{let t,n,o=p.timeFrom+e.time,i=p.timeTo+e.time,a=e.index;for(;a<e.beatmap.length&&e.beatmap[a][0]<=i;)a++;for(;--a>-1&&e.beatmap[a][0]>=o;)if(!e.record[a]){switch(n=e.beatmap[a],n[1]){case 1:t=s[25];break;case 2:t=s[26];break;case 3:t=s[27];break;case 4:t=s[28]}if(t){let e=(n[0]-o)*p.v+p.fx-p.radius;r.drawImage(t,e,p.dy,p.diameter,p.diameter)}}},t.clear=function(){r.clearRect(0,0,o,i)};let w,b,L={h:17*i/100,w:47*o/100,x:37*o/100,y:20*i/100},x={h:95*i/1e3,w:444*o/1e3,x:385*o/1e3,y:234*i/1e3},_={h:19*i/100,w:19*o/100,x:81*o/100,y:175*i/1e3},O={h:178*i/1e3,w:44*o/1e3,x:812*o/1e3,y:142*i/1e3};t.progress=e=>{w=3*c.state().beatmap.length*3.5/10,b=s[31].width;let t=e*x.w/w,n=e*b/w;r.drawImage(s[31],0,0,n,s[31].height,x.x,x.y,t,x.h)},t.score=e=>{let t=e.toString().split(""),n=O.x+10;t.forEach(e=>{r.drawImage(s[e],n,O.y,O.w,O.h),n+=O.w})},t.progressBg=()=>{r.drawImage(s[30],0,0,s[30].width,s[30].height,L.x,L.y,L.w,L.h),r.drawImage(s[32],_.x,_.y,_.w,_.h)},t.dish=()=>{r.drawImage(s[s.length-1],f.fx,f.dy,f.diameter,f.diameter)},t.combo=e=>{h.show=e&&e>=10,h.show&&(h.str=e.toString().split(""),h.stage=h.from)},t.fire=e=>{let t={stage:d.from};t.img="good"==e?s[20]:s[29],d.arr.push(t)},t.tray=e=>{Object.keys(m).forEach(t=>{let n=e[t]?m[t]+"Active":m[t],r=document.querySelector("[data-attr="+t+"]"),o=r.classList.contains(n);o||(t!=n?(r.classList.toggle(n,!o),r.classList.toggle(t,o)):(r.classList.toggle(n,!o),r.classList.toggle(m[t]+"Active",o)))})},t.loop=()=>{if(h.show&&h.state<=h.to){let e=h.centerX+h.width+15;h.str.forEach((t,n)=>{let o=h.anmap[h.stage],i=h.bottomY-o,a=h.numAnmap[h.stage],c=h.bottomY-a+5;r.drawImage(s[24],h.centerX,i,h.width,o),r.drawImage(s[10+1*t],e,c,20,a),e+=20}),h.stage++,h.stage>h.to&&(h.stage=h.to)}d.arr=d.arr.filter(e=>e.stage<=d.to).map(e=>{let t=d.anmap[e.stage],n=d.centerX-t,o=d.centerY-t,i=2*t;return r.drawImage(e.img,n,o,i,i),e.stage++,e})}},function(e,t,n){"use strict";t.decode=t.parse=n(7),t.encode=t.stringify=n(8)},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,i){t=t||"&",n=n||"=";var s={};if("string"!=typeof e||0===e.length)return s;var a=/\+/g;e=e.split(t);var c=1e3;i&&"number"==typeof i.maxKeys&&(c=i.maxKeys);var u=e.length;c>0&&u>c&&(u=c);for(var l=0;l<u;++l){var p,m,f,d,h=e[l].replace(a,"%20"),g=h.indexOf(n);g>=0?(p=h.substr(0,g),m=h.substr(g+1)):(p=h,m=""),f=decodeURIComponent(p),d=decodeURIComponent(m),r(s,f)?o(s[f])?s[f].push(d):s[f]=[s[f],d]:s[f]=d}return s};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,a){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?i(s(e),(function(s){var a=encodeURIComponent(r(s))+n;return o(e[s])?i(e[s],(function(e){return a+encodeURIComponent(r(e))})).join(t):a+encodeURIComponent(r(e[s]))})).join(t):a?encodeURIComponent(r(a))+n+encodeURIComponent(r(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function i(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var s=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,